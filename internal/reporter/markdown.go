package reporter

import (
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

// GenerateMarkdown creates a Markdown report
func (r *Reporter) GenerateMarkdown(outputPath string) error {
	file, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("failed to create Markdown file: %w", err)
	}
	defer file.Close()

	file.WriteString("# Scanera Domain Analysis Report\n\n")
	file.WriteString("Report generated on: " + time.Now().Format("January 2, 2006 15:04:05") + "\n\n")

	activeCount, inactiveCount := r.GetStats()

	file.WriteString("## Summary\n\n")
	file.WriteString("- Total domains scanned: " + strconv.Itoa(len(r.results)) + "\n")
	file.WriteString("- Active domains: " + strconv.Itoa(activeCount) + "\n")
	file.WriteString("- Inactive domains: " + strconv.Itoa(inactiveCount) + "\n\n")

	file.WriteString("## Active Domains\n\n")
	file.WriteString("| Domain | Final URL | Status Code | Server | Technologies |\n")
	file.WriteString("|--------|-----------|-------------|--------|-------------|\n")

	for _, result := range r.results {
		if result.Active {
			techs := strings.Join(result.Technologies, ", ")
			file.WriteString("| " + result.Domain + " | " + result.FinalURL + " | " + strconv.Itoa(result.StatusCode) + " | " + result.ServerInfo.Server + " | " + techs + " |\n")
		}
	}

	file.WriteString("\n## Inactive Domains\n\n")
	file.WriteString("| Domain | Status Code | Error |\n")
	file.WriteString("|--------|-------------|-------|\n")

	for _, result := range r.results {
		if !result.Active {
			errMsg := ""
			if result.Error != nil {
				errMsg = result.Error.Error()
			}
			file.WriteString("| " + result.Domain + " | " + strconv.Itoa(result.StatusCode) + " | " + errMsg + " |\n")
		}
	}

	file.WriteString("\n---\n\n")
	file.WriteString("Generated by Scanera v1.0.0\n")

	return nil
}
